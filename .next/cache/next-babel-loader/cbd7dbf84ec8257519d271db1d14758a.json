{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Document, { Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheets } from \"@material-ui/styles\";\n\nclass MyDocument extends Document {\n  render() {\n    return __jsx(\"html\", {\n      lang: \"en\"\n    }, __jsx(Head, null, __jsx(\"meta\", {\n      charSet: \"utf-8\"\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    }), __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: \"#000000\"\n    }), __jsx(\"link\", {\n      rel: \"shortcut icon\",\n      href: require(\"assets/img/favicon.png\")\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"76x76\",\n      href: require(\"assets/img/apple-icon.png\")\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      type: \"text/css\",\n      href: \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Roboto+Slab:400,700|Material+Icons\"\n    }), __jsx(\"link\", {\n      href: \"https://use.fontawesome.com/releases/v5.0.10/css/all.css\",\n      rel: \"stylesheet\"\n    })), __jsx(\"body\", null, __jsx(\"div\", {\n      id: \"page-transition\"\n    }), __jsx(Main, null), __jsx(NextScript, null)));\n  }\n\n}\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, props))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread({}, initialProps, {\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [__jsx(React.Fragment, {\n      key: \"styles\"\n    }, initialProps.styles, sheets.getStyleElement())]\n  });\n};\n\nexport default MyDocument;","map":null,"metadata":{},"sourceType":"module"}