{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Snack from \"@material-ui/core/SnackbarContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Icon from \"@material-ui/core/Icon\"; // @material-ui/icons\n\nimport Close from \"@material-ui/icons/Close\"; // core components\n\nimport styles from \"assets/jss/nextjs-material-kit/components/snackbarContentStyle.js\";\nconst useStyles = makeStyles(styles);\nexport default function SnackbarContent(props) {\n  const {\n    message,\n    color,\n    close,\n    icon\n  } = props;\n  const classes = useStyles();\n  var action = [];\n\n  const closeAlert = () => {\n    setAlert(null);\n  };\n\n  if (close !== undefined) {\n    action = [__jsx(IconButton, {\n      className: classes.iconButton,\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      onClick: closeAlert\n    }, __jsx(Close, {\n      className: classes.close\n    }))];\n  }\n\n  let snackIcon = null;\n\n  switch (typeof icon) {\n    case \"object\":\n      snackIcon = __jsx(props.icon, {\n        className: classes.icon\n      });\n      break;\n\n    case \"string\":\n      snackIcon = __jsx(Icon, {\n        className: classes.icon\n      }, props.icon);\n      break;\n\n    default:\n      snackIcon = null;\n      break;\n  }\n\n  const [alert, setAlert] = React.useState(__jsx(Snack, {\n    message: __jsx(\"div\", null, snackIcon, message, close !== undefined ? action : null),\n    classes: {\n      root: classes.root + \" \" + classes[color],\n      message: classes.message + \" \" + classes.container\n    }\n  }));\n  return alert;\n}\nSnackbarContent.propTypes = {\n  message: PropTypes.node.isRequired,\n  color: PropTypes.oneOf([\"info\", \"success\", \"warning\", \"danger\", \"primary\"]),\n  close: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.string])\n};","map":null,"metadata":{},"sourceType":"module"}